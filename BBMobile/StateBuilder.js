import Constants from "./Constants";

var bEmptyUserPrefs = {
	isDevilsHand: false,
	isBurnerMode: false,
	wifiLocations: false,
	mapPoints: false,
	isMonitor: false,
};

var bMap = {
	center: Constants.MAN_LOCATION,
	zoom: 12,
	userLocation: Constants.MAN_LOCATION,
}
var bEmptyLogLines = [{ logLine: "", isError: false }];

var bBoardData = [{ name: "none", address: 1234 }]; //    { "color": "coral", "address": 42424, "isProfileGlobal": true, "profile": "Small-Testing","name": "BLUE DASH M2",  "type": "tester"},

var bLocations = [];

var bEmptyMediaState = {
	connectedPeripheral: {
		name: "loading...",
		id: "12345",
		connState: "DISCONNECTED",
	},
	//audio: [null, { channelNo: 1, channelInfo: "loading..." }],
	audio: [{ localName: "loading..." }],
	video: [{ localName: "loading..." }],
	devices: [{ name: "loading...", address: "loading...", isPaired: false, }],
	state: {
		audioChannelNo: 9999,
		videoChannelNo: 9999,
		volume: -1,
		battery: 0,
		audioMaster: 0,
		APKUpdateDate: 0,
		APKVersion: 0,
		IPAddress: "0.0.0.0",
		GTFO: false,
		blockMaster: false,
	},
	region: {
		latitude: 37.78825,
		longitude: -122.4324,
		latitudeDelta: 0.0922,
		longitudeDelta: 0.0922,
		hasBeenAutoGenerated: false,
	},
	locations: [], 
	apiLocations: [], //[{board: "sexy", latitude: 37.759305, longitude: -122.450425, dateTime: "2019-04-02T04:50:31.488000"}]
	isError: false,
};

exports.blankBoardData = function() {
	return JSON.parse(JSON.stringify(bBoardData));
}

exports.blankLocations = function() {
	return JSON.parse(JSON.stringify(bLocations));
}

exports.blankMap = function() {
	return JSON.parse(JSON.stringify(bMap));
}

exports.blankLogLines = function () {
	return JSON.parse(JSON.stringify(bEmptyLogLines));
};
exports.blankUserPrefs = function () {
	return JSON.parse(JSON.stringify(bEmptyUserPrefs));
};

exports.blankMediaState = function () {
	return JSON.parse(JSON.stringify(bEmptyMediaState));
};

exports.boardColor = function (item, boardData) {
	 
	var color = "whitesmoke";

	var foundBoard = boardData.filter((board) => {
		if (board.name)
			return board.name == item;
		else if (board.bootName)
			return board.bootName == item;
		else
			return false;
	});
 
	if (foundBoard[0]) {
		if (foundBoard[0].color) {
			color = foundBoard[0].color;
		}
	}
	return color;
}

