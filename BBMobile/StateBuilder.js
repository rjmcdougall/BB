import Constants from "./Constants";

var bEmptyUserPrefs = {
	isDevilsHand: false,
	isBurnerMode: false,
	wifiLocations: false,
	mapPoints: false,
};

var bMap = {
	center: Constants.MAN_LOCATION,
	zoom: 12,
	userLocation: Constants.MAN_LOCATION,
}
var bEmptyLogLines = [{ logLine: "", isError: false }];

var bBoardData = [{ name: "none", address: 1234 }]; //    { "color": "coral", "address": 42424, "isProfileGlobal": true, "profile": "Small-Testing","name": "BLUE DASH M2",  "type": "tester"},

var bEmptyMediaState = {
	connectedPeripheral: {
		name: "loading...",
		id: "12345",
		connState: "DISCONNECTED",
	},
	//audio: [null, { channelNo: 1, channelInfo: "loading..." }],
	audio: [{ localName: "loading..." }],
	video: [{ localName: "loading..." }],
	devices: [{ name: "loading...", address: "loading...", isPaired: false, }],
	state: {
		audioChannelNo: 9999,
		videoChannelNo: 9999,
		volume: -1,
		battery: 0,
		audioMaster: 0,
		APKUpdateDate: 0,
		APKVersion: 0,
		IPAddress: "0.0.0.0",
		GTFO: false,
		blockMaster: false,
	},
	region: {
		latitude: 37.78825,
		longitude: -122.4324,
		latitudeDelta: 0.0922,
		longitudeDelta: 0.0922,
		hasBeenAutoGenerated: false,
	},
	locations: [],  	// [
						// 	{
						// 		"address": 32602,
						// 		"board": "sexy",
						// 		"locations": [
						// 			{
						// 				"lastHeardDate": 1560030808457,
						// 				"latitude": 37.777535,
						// 				"longitude": -122.391828
						// 			},
						// 			{
						// 				"lastHeardDate": 1560030851735,
						// 				"latitude": 37.77758,
						// 				"longitude": -122.391803
						// 			}
						// 		]
						// 	}
						// ]
	apiLocations: [], //[{board: "sexy", latitude: 37.759305, longitude: -122.450425, dateTime: "2019-04-02T04:50:31.488000"}]
	isError: false,
};

exports.blankBoardData = function() {
	return JSON.parse(JSON.stringify(bBoardData));
}

exports.blankMap = function() {
	return JSON.parse(JSON.stringify(bMap));
}

exports.blankLogLines = function () {
	return JSON.parse(JSON.stringify(bEmptyLogLines));
};
exports.blankUserPrefs = function () {
	return JSON.parse(JSON.stringify(bEmptyUserPrefs));
};

exports.blankMediaState = function () {
	return JSON.parse(JSON.stringify(bEmptyMediaState));
};
 
// exports.getLocations = function (mediaState, showAPILocations) {

// 	if (showAPILocations) {
// 		var locations = [...mediaState.locations, ...mediaState.apiLocations];
// 		var afterLocations = Array();
// 		var currentBoard;
// 		var existingBoard;

// 		for (var i = 0; i < locations.length; i++) {
// 			currentBoard = locations[i];

// 			// if it  exists
// 			existingBoard = afterLocations.filter((item) => {
// 				return currentBoard.board == item.board;
// 			});

// 			if (existingBoard[0]) {
// 				if (existingBoard.dateTime < currentBoard.dateTime) {
// 					// remove it and add the new one
// 					afterLocations = afterLocations.filter((board) => {
// 						return board.board != existingBoard[0].board;
// 					});
// 					afterLocations.push(currentBoard);
// 				}
// 			}
// 			else {
// 				// add it
// 				afterLocations.push(currentBoard);
// 			}
// 		}
// 		console.log("after locations:");
// 		console.log(afterLocations);
// 		return afterLocations;
// 	}
// 	else {
// 		return mediaState.locations;
// 	}
// };


exports.getRegionForCoordinates = function (points) {
	// points should be an array of { latitude: X, longitude: Y }
	let minX, maxX, minY, maxY;

	// init first point
	((point) => {
		minX = point.latitude;
		maxX = point.latitude;
		minY = point.longitude;
		maxY = point.longitude;
	})(points[0]);

	// calculate rect
	points.map((point) => {
		minX = Math.min(minX, point.latitude);
		maxX = Math.max(maxX, point.latitude);
		minY = Math.min(minY, point.longitude);
		maxY = Math.max(maxY, point.longitude);
	});

	const midX = (minX + maxX) / 2;
	const midY = (minY + maxY) / 2;
	const deltaX = Math.max(0.01, (maxX - minX) * 2);
	const deltaY = Math.max(0.01, (maxY - minY) * 2);

	return {
		latitude: midX,
		longitude: midY,
		latitudeDelta: deltaX,
		longitudeDelta: deltaY,
		hasBeenAutoGenerated: true,
	};
};

exports.getBoundsForCoordinates = function (points) {
	// points should be an array of { latitude: X, longitude: Y }
	let minX, maxX, minY, maxY;

	// init first point
	((point) => {
		minX = point.latitude;
		maxX = point.latitude;
		minY = point.longitude;
		maxY = point.longitude;
	})(points[0]);

	// calculate rect
	points.map((point) => {
		minX = Math.min(minX, point.latitude);
		maxX = Math.max(maxX, point.latitude);
		minY = Math.min(minY, point.longitude);
		maxY = Math.max(maxY, point.longitude);
	});

	const midX = (minX + maxX) / 2;
	const midY = (minY + maxY) / 2;
	const deltaX = Math.max(0.005, (maxX - minX) * 1.5);
	const deltaY = Math.max(0.005, (maxY - minY) * 1.5);

	var bound = [[(midY-deltaY),(midX+deltaX)],[(midY+deltaY),(midX-deltaX)]];

	return bound;
};

exports.boardColor = function (item, boardData) {
	 
	var color = "whitesmoke";

	var foundBoard = boardData.filter((board) => {
		if (board.name)
			return board.name == item;
		else if (board.bootName)
			return board.bootName == item;
		else
			return false;
	});
 
	if (foundBoard[0]) {
		if (foundBoard[0].color) {
			color = foundBoard[0].color;
		}
	}
	return color;
}

